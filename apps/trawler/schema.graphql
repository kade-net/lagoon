scalar Date
scalar JSON

type CommunityStats {
  members: Int!
  publications: Int!
}

type Community {
  id: Int!
  name: String!
  description: String!
  image: String!
  timestamp: Date!
  creator: Account!
  hosts: [Account!]
  stats: CommunityStats!
  display_name: String
}

type Membership {
  id: Int!
  community_id: Int!
  community: Community!
  user_kid: Int!
  user: Account!
  type: Int!
  timestamp: Date!
  is_active: Boolean!
}

type AccountStats {
  id: Int!
  followers: Int!
  following: Int!
  posts: Int!
  delegates: Int!
  reposts: Int!
  quotes: Int!
  comments: Int!
  reactions: Int!
}

type Profile {
  address: String!
  creator: Int!
  pfp: String
  bio: String
  display_name: String
}

type Username {
  username: String!
  owner_address: String!
  token_address: String!
  timestamp: Date!
}

type AccountViewerStats {
  id: Int!
  follows: Boolean!
  followed: Boolean!
}

type Account {
  id: Int!
  bio: String
  address: String!
  object_address: String!
  follow_count: Int
  followers(pagination: Pagination): [Follow!]
  following(pagination: Pagination): [Follow!]
  publications(
    pagination: Pagination
    type: Int
    sort: SortOrder
  ): [Publication!]
  delegates: [Delegate!]
  reactions: [Reaction!]
  stats: AccountStats!
  timestamp: Date!
  profile: Profile
  username: Username
  viewer(viewer: Int, address: String): AccountViewerStats
}

type Delegate {
  id: Int!
  address: String!
  owner_id: Int!
  owner: Account!
  timestamp: Date!
}

type Follow {
  id: Int!
  follower_id: Int!
  follower: Account!
  following_id: Int!
  following: Account!
  timestamp: Date!
}

type PublicationStats {
  ref: String!
  reposts: Int!
  quotes: Int!
  comments: Int!
  reactions: Int!
}

type PublicationViewerStats {
  ref: String!
  reacted: Boolean!
  quoted: Boolean!
  quote_refs: [String!]
  commented: Boolean!
  comment_refs: [String!]
  reposted: Boolean!
  repost_refs: [String!]
}

type Publication {
  id: Int!
  content: JSON!
  creator_id: Int!
  creator: Account!
  children(pagination: Pagination, type: Int, sort: SortOrder): [Publication!]
  parent: Publication
  type: Int!
  reactions: [Reaction!]
  timestamp: Date!
  stats: PublicationStats!
  viewer(viewer: Int): PublicationViewerStats
  publication_ref: String
  community: Community
}

type Reaction {
  id: Int!
  publication_id: Int
  creator_id: Int!
  reaction: Int!
  creator: Account!
  timestamp: Date!
  publication: Publication
}

type Notification {
  referenceUserId: Int!
  referenceUser: Account!
  type: Int!
  timestamp: Date!
  referenceDataId: Int!
  publication: Publication
  follow: Follow
  reaction: Reaction
}

input Pagination {
  page: Int!
  size: Int!
}

enum SortOrder {
  ASC
  DESC
}

type Query {
  account(id: Int, address: String, username: String): Account
  accounts(
    pagination: Pagination
    sort: SortOrder
    search: String
    byFollowing: Boolean
  ): [Account!]
  accountsSearch(search: String!, userAddress: String!): [Account!]
  publication(id: Int, ref: String): Publication
  publicationThreads(id: Int, ref: String): [Publication!]
  publications(
    pagination: Pagination
    type: Int
    creator: Int
    sort: SortOrder
    creator_address: String
    types: [Int!]
    reaction: Int
    hide: [String!]
    muted: [Int!]
    following_feed: String
  ): [Publication!]
  publicationStats(id: Int, ref: String): PublicationStats
  publicationInteractionsByViewer(
    id: Int
    ref: String
    viewer: Int
    address: String
  ): PublicationViewerStats
  publicationComments(
    id: Int
    ref: String
    pagination: Pagination
    sort: SortOrder
    hide: [String!]
    muted: [Int!]
  ): [Publication!]
  accountViewerStats(
    accountAddress: String!
    viewerAddress: String!
  ): AccountViewerStats
  accountPublications(
    accountAddress: String!
    pagination: Pagination
    sort: SortOrder
    type: Int
  ): [Publication!]
  communities(
    pagination: Pagination
    sort: SortOrder
    creator: String
    search: String
    memberAddress: String
    following: Boolean
  ): [Community!]
  communitiesSearch(search: String!, memberAddress: String!): [Community!]
  accountCommunities(
    accountAddress: String!
    pagination: Pagination
    sort: SortOrder
  ): [Community!]
  community(id: Int, name: String): Community
  communityPublications(
    communityId: Int
    communityName: String
    pagination: Pagination
    sort: SortOrder
    hide: [String!]
    muted: [Int!]
  ): [Publication!]
  membership(
    userName: String
    communityName: String!
    userAddress: String
  ): Membership
  memberships(
    pagination: Pagination
    sort: SortOrder
    communityId: Int
    communityName: String
    search: String
  ): [Account!]
  followers(accountAddress: String!, pagination: Pagination): [Account!]
  following(accountAddress: String!, pagination: Pagination): [Account!]
  userNotifications(
    accountAddress: String!
    pagination: Pagination
    sort: SortOrder
  ): [Notification!]
  accountUserName(accountAddress: String!): Username
  accountRelationship(
    viewerAddress: String!
    accountAddress: String!
  ): AccountViewerStats
  accountStats(accountAddress: String!): AccountStats
}
